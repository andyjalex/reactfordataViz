{"ast":null,"code":"var _jsxFileName = \"/Users/andyalexander/Documents/d3/React/reactfordataviz/src/components/Dropdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dropdown = _ref => {\n  _s();\n\n  let {\n    label,\n    options,\n    selected,\n    onSelectedChange\n  } = _ref;\n  const [open, setOpen] = useState(false);\n  const ref = useRef();\n  useEffect(() => {\n    const onBodyClick = event => {\n      if (ref.current.contains(event.target)) {\n        //comes from UI form. Maybe a multi select wouldn't want to do this?\n        return;\n      }\n\n      ;\n      setOpen(false);\n    };\n\n    document.body.addEventListener(\"click\", onBodyClick, {\n      capture: true\n    });\n    return () => {\n      document.body.removeEventListener(\"click\", onBodyClick, {\n        capture: true\n      });\n    };\n  }, []);\n\n  const onHandleChange = option => {\n    console.log(option);\n    console.log(open);\n    onSelectedChange(option);\n  };\n\n  const renderedOptions = options.map(option => {\n    var optionFound = 0;\n    selected.map(sOption => {\n      if (option.value === sOption.value) optionFound = 1;\n    });\n\n    if (optionFound === 1) {\n      return null;\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        onClick: () => onHandleChange(option),\n        children: option.label\n      }, option.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this);\n    }\n  });\n\n  const onHandleOpen = event => {\n    if (event.target.className !== 'item') {\n      setOpen(!open);\n    }\n  };\n\n  const renderedTitle = () => {\n    var text = '';\n    selected.map(option => {\n      text = option.label;\n    });\n    console.log(text);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    className: \"ui form\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"label\",\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: e => onHandleOpen(e),\n        className: `ui selection dropdown ${open ? 'visible active' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"dropdown icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), renderedTitle(), /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => setOpen(true),\n          className: `menu ${open ? 'visible transition' : ''}`,\n          children: renderedOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dropdown, \"/6at3BdIBUpNeWkNnyUwLy0YywQ=\");\n\n_c = Dropdown;\nexport default Dropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"sources":["/Users/andyalexander/Documents/d3/React/reactfordataviz/src/components/Dropdown.js"],"names":["React","useState","useEffect","useRef","Dropdown","label","options","selected","onSelectedChange","open","setOpen","ref","onBodyClick","event","current","contains","target","document","body","addEventListener","capture","removeEventListener","onHandleChange","option","console","log","renderedOptions","map","optionFound","sOption","value","onHandleOpen","className","renderedTitle","text","e"],"mappings":"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","sourcesContent":["import React, { useState , useEffect, useRef } from 'react';\n\n\nconst Dropdown = ({ label, options, selected, onSelectedChange }) => {\n  const [open, setOpen ] = useState(false);\n  const ref = useRef();\n\n  useEffect(() => {\n    const onBodyClick = (event) => {\n      if(ref.current.contains(event.target)) {\n        //comes from UI form. Maybe a multi select wouldn't want to do this?\n        return;\n      };\n\n      setOpen(false);\n    };\n\n\n    document.body.addEventListener(\"click\", onBodyClick, { capture: true });\n\n    return () => {\n      document.body.removeEventListener(\"click\", onBodyClick, {\n        capture: true,\n      });\n\n    };\n  }, []);\n\n  const onHandleChange = (option) => {\n    console.log(option)\n    console.log(open)\n    onSelectedChange(option)\n  }\n\n  const renderedOptions = options.map((option) => {\n    var optionFound = 0\n    selected.map((sOption) => {\n      if(option.value === sOption.value)\n      optionFound =1\n    })\n\n    if (optionFound === 1) {\n    return null\n    } else {\n    return (\n      <div\n        key={option.value}\n        className=\"item\"\n        onClick={() => onHandleChange(option)}\n        >\n        {option.label}\n      </div>\n    );\n\n    }\n  })\n\n  const onHandleOpen = (event) => {\n    if(event.target.className !== 'item') {\n      setOpen(!open)\n    }\n  }\n\n  const renderedTitle = () =>{\n    var text =''\n    selected.map((option)=>{\n\n      text = option.label\n\n    })\n    console.log(text)\n    return (\n      <div className=\"text\">{text}</div>\n    )\n  }\n\n  return (\n    <div ref={ref} className=\"ui form\">\n      <div className=\"field\">\n        <label className=\"label\">{label}</label>\n        <div\n          onClick={(e) => onHandleOpen(e)}\n          className={`ui selection dropdown ${open ? 'visible active': ''}`}\n        >\n          <i className=\"dropdown icon\"></i>\n          {renderedTitle()}\n          <div\n            onClick={() => setOpen(true)}\n            className={`menu ${open ? 'visible transition': ''}`}\n          >\n          {renderedOptions}\n        </div>\n      </div>\n    </div>\n  </div>\n  );\n};\n\nexport default Dropdown;\n"]},"metadata":{},"sourceType":"module"}