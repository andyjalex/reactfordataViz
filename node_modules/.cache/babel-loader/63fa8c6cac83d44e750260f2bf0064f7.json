{"ast":null,"code":"import * as d3 from 'd3';\nconst MARGIN = {\n  TOP: 10,\n  BOTTOM: 80,\n  LEFT: 70,\n  RIGHT: 10\n};\nconst WIDTH = 500 - MARGIN.LEFT - MARGIN.RIGHT;\nconst HEIGHT = 300 - MARGIN.TOP - MARGIN.BOTTOM;\n\nclass D3Chart {\n  constructor(element, data) {\n    let vis = this;\n    vis.data = data;\n    var xColumn = \"Date\";\n    var yColumn = \"Score\";\n    vis.g = d3.select(element).append(\"svg\").attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT).attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM).append(\"g\").attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`); //var parseTime = d3.timeParse(\"%Y-%m-%d\");\n    //need to clean up data.\n\n    vis.data.forEach(d => {\n      d.Year = d.Month.substr(0, 4);\n      d.Month = d.Month.substr(5, 2);\n      d.West = Number(d.West);\n      d.Labrador = Number(d.Labrador);\n    });\n    vis.data.forEach(d => {\n      d.NewDate = new Date(d.Year, d.Month, '01');\n    }); // unpivot the data\n\n    var newArray = [];\n    vis.data.forEach(d => {\n      newArray.push({\n        Date: Number(d.NewDate),\n        Score: d.West\n      }); //newArray.push({Date: d.NewDate, Breed: 'Labrador', Score: d.Labrador})\n    });\n    console.log(vis.data); //console.log(newArray)\n    // scales\n\n    vis.x = d3.scaleTime().range([0, WIDTH]);\n    vis.y = d3.scaleLinear().range([HEIGHT, 0]); // axis generators\n\n    vis.xAxisCall = d3.axisBottom();\n    vis.yAxisCall = d3.axisLeft().ticks(6).tickFormat(d3.format('.3s')); // axis groups\n\n    vis.xAxis = vis.g.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", `translate(0, ${HEIGHT})`);\n    vis.yAxis = vis.g.append(\"g\").attr(\"class\", \"y axis\"); // Path generator\n\n    vis.update(newArray);\n  }\n\n  update(data) {\n    let vis = this;\n    vis.x.domain(d3.extent(data, d => d.date));\n    vis.y.domain([0, d3.max(data, d => d.score)]); // generate axes once scales have been set\n\n    vis.xAxis.call(vis.xAxisCall.scale(vis.x));\n    vis.yAxis.call(vis.yAxisCall.scale(vis.y));\n    console.log(data); // line path generator\n\n    const line = d3.line().x(d => vis.x(d.Date)).y(d => vis.y(d.Score));\n    vis.g.append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", \"#000\").attr(\"stroke-width\", 1.5).attr(\"d\", line(data));\n  }\n\n}\n\nexport default D3Chart;","map":{"version":3,"sources":["/Users/andyalexander/Documents/d3/React/reactfordataviz/src/D3Chart.js"],"names":["d3","MARGIN","TOP","BOTTOM","LEFT","RIGHT","WIDTH","HEIGHT","D3Chart","constructor","element","data","vis","xColumn","yColumn","g","select","append","attr","forEach","d","Year","Month","substr","West","Number","Labrador","NewDate","Date","newArray","push","Score","console","log","x","scaleTime","range","y","scaleLinear","xAxisCall","axisBottom","yAxisCall","axisLeft","ticks","tickFormat","format","xAxis","yAxis","update","domain","extent","date","max","score","call","scale","line"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AAEA,MAAMC,MAAM,GAAG;AAAEC,EAAAA,GAAG,EAAE,EAAP;AAAWC,EAAAA,MAAM,EAAE,EAAnB;AAAuBC,EAAAA,IAAI,EAAE,EAA7B;AAAiCC,EAAAA,KAAK,EAAE;AAAxC,CAAf;AACA,MAAMC,KAAK,GAAG,MAAML,MAAM,CAACG,IAAb,GAAoBH,MAAM,CAACI,KAAzC;AACA,MAAME,MAAM,GAAG,MAAMN,MAAM,CAACC,GAAb,GAAmBD,MAAM,CAACE,MAAzC;;AAEA,MAAMK,OAAN,CAAc;AACbC,EAAAA,WAAW,CAACC,OAAD,EAAUC,IAAV,EAAgB;AAC1B,QAAIC,GAAG,GAAG,IAAV;AAEEA,IAAAA,GAAG,CAACD,IAAJ,GAAWA,IAAX;AACF,QAAIE,OAAO,GAAG,MAAd;AACA,QAAIC,OAAO,GAAG,OAAd;AAIAF,IAAAA,GAAG,CAACG,CAAJ,GAAQf,EAAE,CAACgB,MAAH,CAAUN,OAAV,EACNO,MADM,CACC,KADD,EAELC,IAFK,CAEA,OAFA,EAESZ,KAAK,GAAGL,MAAM,CAACG,IAAf,GAAsBH,MAAM,CAACI,KAFtC,EAGLa,IAHK,CAGA,QAHA,EAGUX,MAAM,GAAGN,MAAM,CAACC,GAAhB,GAAsBD,MAAM,CAACE,MAHvC,EAINc,MAJM,CAIC,GAJD,EAKLC,IALK,CAKA,WALA,EAKc,aAAYjB,MAAM,CAACG,IAAK,KAAIH,MAAM,CAACC,GAAI,GALrD,CAAR,CAT0B,CAgB1B;AAEE;;AACFU,IAAAA,GAAG,CAACD,IAAJ,CAASQ,OAAT,CAAiBC,CAAC,IAAI;AACnBA,MAAAA,CAAC,CAACC,IAAF,GAASD,CAAC,CAACE,KAAF,CAAQC,MAAR,CAAe,CAAf,EAAiB,CAAjB,CAAT;AACFH,MAAAA,CAAC,CAACE,KAAF,GAAUF,CAAC,CAACE,KAAF,CAAQC,MAAR,CAAe,CAAf,EAAiB,CAAjB,CAAV;AACAH,MAAAA,CAAC,CAACI,IAAF,GAASC,MAAM,CAACL,CAAC,CAACI,IAAH,CAAf;AACAJ,MAAAA,CAAC,CAACM,QAAF,GAAaD,MAAM,CAACL,CAAC,CAACM,QAAH,CAAnB;AACC,KALF;AAMAd,IAAAA,GAAG,CAACD,IAAJ,CAASQ,OAAT,CAAiBC,CAAC,IAAI;AACrBA,MAAAA,CAAC,CAACO,OAAF,GAAY,IAAIC,IAAJ,CAASR,CAAC,CAACC,IAAX,EAAiBD,CAAC,CAACE,KAAnB,EAA0B,IAA1B,CAAZ;AACA,KAFD,EAzB0B,CA6B1B;;AACA,QAAIO,QAAQ,GAAG,EAAf;AACAjB,IAAAA,GAAG,CAACD,IAAJ,CAASQ,OAAT,CAAiBC,CAAC,IAAI;AACrBS,MAAAA,QAAQ,CAACC,IAAT,CAAc;AAACF,QAAAA,IAAI,EAAEH,MAAM,CAACL,CAAC,CAACO,OAAH,CAAb;AAA0BI,QAAAA,KAAK,EAAEX,CAAC,CAACI;AAAnC,OAAd,EADqB,CAErB;AACA,KAHD;AAMAQ,IAAAA,OAAO,CAACC,GAAR,CAAYrB,GAAG,CAACD,IAAhB,EArC0B,CAsC1B;AAEA;;AACAC,IAAAA,GAAG,CAACsB,CAAJ,GAAQlC,EAAE,CAACmC,SAAH,GAAeC,KAAf,CAAqB,CAAC,CAAD,EAAI9B,KAAJ,CAArB,CAAR;AACAM,IAAAA,GAAG,CAACyB,CAAJ,GAAQrC,EAAE,CAACsC,WAAH,GAAiBF,KAAjB,CAAuB,CAAC7B,MAAD,EAAS,CAAT,CAAvB,CAAR,CA1C0B,CA6C1B;;AACAK,IAAAA,GAAG,CAAC2B,SAAJ,GAAgBvC,EAAE,CAACwC,UAAH,EAAhB;AACA5B,IAAAA,GAAG,CAAC6B,SAAJ,GAAgBzC,EAAE,CAAC0C,QAAH,GACdC,KADc,CACR,CADQ,EAEdC,UAFc,CAEH5C,EAAE,CAAC6C,MAAH,CAAU,KAAV,CAFG,CAAhB,CA/C0B,CAmD1B;;AACAjC,IAAAA,GAAG,CAACkC,KAAJ,GAAYlC,GAAG,CAACG,CAAJ,CAAME,MAAN,CAAa,GAAb,EACVC,IADU,CACL,OADK,EACI,QADJ,EAEVA,IAFU,CAEL,WAFK,EAES,gBAAeX,MAAO,GAF/B,CAAZ;AAGAK,IAAAA,GAAG,CAACmC,KAAJ,GAAYnC,GAAG,CAACG,CAAJ,CAAME,MAAN,CAAa,GAAb,EACVC,IADU,CACL,OADK,EACI,QADJ,CAAZ,CAvD0B,CA0D1B;;AAEAN,IAAAA,GAAG,CAACoC,MAAJ,CAAWnB,QAAX;AACA;;AAEDmB,EAAAA,MAAM,CAACrC,IAAD,EAAO;AACZ,QAAIC,GAAG,GAAG,IAAV;AAEAA,IAAAA,GAAG,CAACsB,CAAJ,CAAMe,MAAN,CAAajD,EAAE,CAACkD,MAAH,CAAUvC,IAAV,EAAgBS,CAAC,IAAIA,CAAC,CAAC+B,IAAvB,CAAb;AACAvC,IAAAA,GAAG,CAACyB,CAAJ,CAAMY,MAAN,CAAa,CAAC,CAAD,EAAIjD,EAAE,CAACoD,GAAH,CAAOzC,IAAP,EAAaS,CAAC,IAAIA,CAAC,CAACiC,KAApB,CAAJ,CAAb,EAJY,CAMZ;;AACAzC,IAAAA,GAAG,CAACkC,KAAJ,CAAUQ,IAAV,CAAe1C,GAAG,CAAC2B,SAAJ,CAAcgB,KAAd,CAAoB3C,GAAG,CAACsB,CAAxB,CAAf;AACAtB,IAAAA,GAAG,CAACmC,KAAJ,CAAUO,IAAV,CAAe1C,GAAG,CAAC6B,SAAJ,CAAcc,KAAd,CAAoB3C,GAAG,CAACyB,CAAxB,CAAf;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYtB,IAAZ,EATY,CAYb;;AACA,UAAM6C,IAAI,GAAGxD,EAAE,CAACwD,IAAH,GACXtB,CADW,CACTd,CAAC,IAAIR,GAAG,CAACsB,CAAJ,CAAMd,CAAC,CAACQ,IAAR,CADI,EAEXS,CAFW,CAETjB,CAAC,IAAIR,GAAG,CAACyB,CAAJ,CAAMjB,CAAC,CAACW,KAAR,CAFI,CAAb;AAICnB,IAAAA,GAAG,CAACG,CAAJ,CAAME,MAAN,CAAa,MAAb,EACOC,IADP,CACY,MADZ,EACoB,MADpB,EAEOA,IAFP,CAEY,QAFZ,EAEsB,MAFtB,EAGOA,IAHP,CAGY,cAHZ,EAG4B,GAH5B,EAIEA,IAJF,CAIO,GAJP,EAIYsC,IAAI,CAAC7C,IAAD,CAJhB;AAOA;;AAxFY;;AA2Fd,eAAeH,OAAf","sourcesContent":["import * as d3 from 'd3'\n\nconst MARGIN = { TOP: 10, BOTTOM: 80, LEFT: 70, RIGHT: 10 }\nconst WIDTH = 500 - MARGIN.LEFT - MARGIN.RIGHT\nconst HEIGHT = 300 - MARGIN.TOP - MARGIN.BOTTOM\n\nclass D3Chart {\n\tconstructor(element, data) {\n\t\tlet vis = this\n\n    vis.data = data;\n\t\tvar xColumn = \"Date\"\n\t\tvar yColumn = \"Score\"\n\n\n\n\t\tvis.g = d3.select(element)\n\t\t\t.append(\"svg\")\n\t\t\t\t.attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\n\t\t\t\t.attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\n\t\t\t.append(\"g\")\n\t\t\t\t.attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\n\n\t\t//var parseTime = d3.timeParse(\"%Y-%m-%d\");\n\n    //need to clean up data.\n\t\tvis.data.forEach(d => {\n\t    d.Year = d.Month.substr(0,4)\n\t\t\td.Month = d.Month.substr(5,2)\n\t\t\td.West = Number(d.West)\n\t\t\td.Labrador = Number(d.Labrador)\n\t  })\n\t\tvis.data.forEach(d => {\n\t\t\td.NewDate = new Date(d.Year, d.Month, '01')\n\t\t})\n\n\t\t// unpivot the data\n\t\tvar newArray = []\n\t\tvis.data.forEach(d => {\n\t\t\tnewArray.push({Date: Number(d.NewDate), Score: d.West,})\n\t\t\t//newArray.push({Date: d.NewDate, Breed: 'Labrador', Score: d.Labrador})\n\t\t})\n\n\n\t\tconsole.log(vis.data)\n\t\t//console.log(newArray)\n\n\t\t// scales\n\t\tvis.x = d3.scaleTime().range([0, WIDTH])\n\t\tvis.y = d3.scaleLinear().range([HEIGHT, 0])\n\n\n\t\t// axis generators\n\t\tvis.xAxisCall = d3.axisBottom()\n\t\tvis.yAxisCall = d3.axisLeft()\n\t\t\t.ticks(6)\n\t\t\t.tickFormat(d3.format('.3s'))\n\n\t\t// axis groups\n\t\tvis.xAxis = vis.g.append(\"g\")\n\t\t\t.attr(\"class\", \"x axis\")\n\t\t\t.attr(\"transform\", `translate(0, ${HEIGHT})`)\n\t\tvis.yAxis = vis.g.append(\"g\")\n\t\t\t.attr(\"class\", \"y axis\")\n\n\t\t// Path generator\n\n\t\tvis.update(newArray)\n\t}\n\n\tupdate(data) {\n\t\tlet vis = this\n\n\t\tvis.x.domain(d3.extent(data, d => d.date))\n\t\tvis.y.domain([0, d3.max(data, d => d.score)])\n\n\t\t// generate axes once scales have been set\n\t\tvis.xAxis.call(vis.xAxisCall.scale(vis.x))\n\t\tvis.yAxis.call(vis.yAxisCall.scale(vis.y))\n\t\tconsole.log(data)\n\n\n\t// line path generator\n\tconst line = d3.line()\n\t\t.x(d => vis.x(d.Date))\n\t\t.y(d => vis.y(d.Score))\n\n\t\tvis.g.append(\"path\")\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"#000\")\n        .attr(\"stroke-width\", 1.5)\n\t\t\t.attr(\"d\", line(data));\n\n\n\t}\n}\n\nexport default D3Chart\n"]},"metadata":{},"sourceType":"module"}