{"ast":null,"code":"import * as d3 from 'd3';\nconst MARGIN = {\n  TOP: 10,\n  BOTTOM: 80,\n  LEFT: 70,\n  RIGHT: 10\n};\nconst WIDTH = 500 - MARGIN.LEFT - MARGIN.RIGHT;\nconst HEIGHT = 300 - MARGIN.TOP - MARGIN.BOTTOM;\n\nclass D3Chart {\n  constructor(element, data) {\n    let vis = this;\n    vis.data = data;\n    var xColumn = \"Date\";\n    var yColumn = \"Score\";\n    vis.g = d3.select(element).append(\"svg\").attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT).attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM).append(\"g\").attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`); //\n    // //need to clean up data.\n    // vis.data.forEach(d => {\n    //   d.Year = d.Month.substr(0,4)\n    // \td.Month = d.Month.substr(5,2)\n    // \td.West = Number(d.West)\n    // \td.Labrador = Number(d.Labrador)\n    // })\n    // vis.data.forEach(d => {\n    // \td.NewDate = new Date(d.Year, d.Month, '01')\n    // })\n    //\n    // // unpivot the data\n    // var newArray = []\n    // vis.data.forEach(d => {\n    // \tnewArray.push({Date: d.NewDate, Breed: 'West', Score: d.West,})\n    // \tnewArray.push({Date: d.NewDate, Breed: 'Labrador', Score: d.Labrador})\n    // })\n\n    console.log(vis.data); //console.log(newArray)\n    // // scales\n    // vis.x = d3.scaleTime().range([0, WIDTH])\n    // vis.y = d3.scaleLinear().range([HEIGHT, 0])\n    //\n    //\n    // // axis generators\n    // vis.xAxisCall = d3.axisBottom()\n    // vis.yAxisCall = d3.axisLeft()\n    // \t.ticks(6)\n    // \t.tickFormat(d3.format('.3s'))\n    //\n    // // axis groups\n    // vis.xAxis = vis.g.append(\"g\")\n    // \t.attr(\"class\", \"x axis\")\n    // \t.attr(\"transform\", `translate(0, ${HEIGHT})`)\n    // vis.yAxis = vis.g.append(\"g\")\n    // \t.attr(\"class\", \"y axis\")\n    // Path generator\n\n    vis.update(vis.data);\n  }\n\n  update(data) {\n    let vis = this;\n    var lineColumn = 'Breed';\n    var xColumn = \"Date\";\n    var yColumn = \"Score\"; // vis.x.domain(d3.extent(data, d => d.Date))\n    // vis.y.domain([0, d3.max(data, d => d.Score)])\n    //\n    // // generate axes once scales have been set\n    // vis.xAxis.call(vis.xAxisCall.scale(vis.x))\n    // vis.yAxis.call(vis.yAxisCall.scale(vis.y))\n    //\n    // console.log(data)\n    // var nested = Array.from(d3.group(data, d => d[lineColumn]),([key, value]) => ({key, value}));\n    //\n    // console.log(nested)\n    //\n    //\n    // const line = d3.line()\n    // .x(function(d) { return vis.x(d[xColumn]); })\n    // .y(function(d) { return vis.y(d[yColumn]); });\n    //\n    // var paths = vis.g.selectAll(\".chart-line\").data(nested);\n    // paths.enter().append(\"path\").attr(\"class\", \"chart-line\")\n    // //paths.exit().remove();\n    // paths.attr(\"d\", function (d){  return line(d.values);});\n  }\n\n}\n\nexport default D3Chart;","map":{"version":3,"sources":["/Users/andyalexander/Documents/d3/React/reactfordataviz/src/D3Chart.js"],"names":["d3","MARGIN","TOP","BOTTOM","LEFT","RIGHT","WIDTH","HEIGHT","D3Chart","constructor","element","data","vis","xColumn","yColumn","g","select","append","attr","console","log","update","lineColumn"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AAGA,MAAMC,MAAM,GAAG;AAAEC,EAAAA,GAAG,EAAE,EAAP;AAAWC,EAAAA,MAAM,EAAE,EAAnB;AAAuBC,EAAAA,IAAI,EAAE,EAA7B;AAAiCC,EAAAA,KAAK,EAAE;AAAxC,CAAf;AACA,MAAMC,KAAK,GAAG,MAAML,MAAM,CAACG,IAAb,GAAoBH,MAAM,CAACI,KAAzC;AACA,MAAME,MAAM,GAAG,MAAMN,MAAM,CAACC,GAAb,GAAmBD,MAAM,CAACE,MAAzC;;AAEA,MAAMK,OAAN,CAAc;AACbC,EAAAA,WAAW,CAACC,OAAD,EAAUC,IAAV,EAAgB;AAC1B,QAAIC,GAAG,GAAG,IAAV;AAEEA,IAAAA,GAAG,CAACD,IAAJ,GAAWA,IAAX;AAEF,QAAIE,OAAO,GAAG,MAAd;AACA,QAAIC,OAAO,GAAG,OAAd;AAIAF,IAAAA,GAAG,CAACG,CAAJ,GAAQf,EAAE,CAACgB,MAAH,CAAUN,OAAV,EACNO,MADM,CACC,KADD,EAELC,IAFK,CAEA,OAFA,EAESZ,KAAK,GAAGL,MAAM,CAACG,IAAf,GAAsBH,MAAM,CAACI,KAFtC,EAGLa,IAHK,CAGA,QAHA,EAGUX,MAAM,GAAGN,MAAM,CAACC,GAAhB,GAAsBD,MAAM,CAACE,MAHvC,EAINc,MAJM,CAIC,GAJD,EAKLC,IALK,CAKA,WALA,EAKc,aAAYjB,MAAM,CAACG,IAAK,KAAIH,MAAM,CAACC,GAAI,GALrD,CAAR,CAV0B,CAkB1B;AACE;AACF;AACC;AACD;AACA;AACA;AACC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGAiB,IAAAA,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACD,IAAhB,EAtC0B,CAuC1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEAC,IAAAA,GAAG,CAACS,MAAJ,CAAWT,GAAG,CAACD,IAAf;AACA;;AAEDU,EAAAA,MAAM,CAACV,IAAD,EAAO;AACZ,QAAIC,GAAG,GAAG,IAAV;AAEA,QAAIU,UAAU,GAAE,OAAhB;AACA,QAAIT,OAAO,GAAG,MAAd;AACA,QAAIC,OAAO,GAAG,OAAd,CALY,CAOZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;AACF;AACA;AACA;AACA;AACA;AAGA;;AA/FY;;AAkGd,eAAeN,OAAf","sourcesContent":["import * as d3 from 'd3'\n\n\nconst MARGIN = { TOP: 10, BOTTOM: 80, LEFT: 70, RIGHT: 10 }\nconst WIDTH = 500 - MARGIN.LEFT - MARGIN.RIGHT\nconst HEIGHT = 300 - MARGIN.TOP - MARGIN.BOTTOM\n\nclass D3Chart {\n\tconstructor(element, data) {\n\t\tlet vis = this\n\n    vis.data = data;\n\n\t\tvar xColumn = \"Date\"\n\t\tvar yColumn = \"Score\"\n\n\n\n\t\tvis.g = d3.select(element)\n\t\t\t.append(\"svg\")\n\t\t\t\t.attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\n\t\t\t\t.attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\n\t\t\t.append(\"g\")\n\t\t\t\t.attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\n\n\n\t\t//\n    // //need to clean up data.\n\t\t// vis.data.forEach(d => {\n\t  //   d.Year = d.Month.substr(0,4)\n\t\t// \td.Month = d.Month.substr(5,2)\n\t\t// \td.West = Number(d.West)\n\t\t// \td.Labrador = Number(d.Labrador)\n\t  // })\n\t\t// vis.data.forEach(d => {\n\t\t// \td.NewDate = new Date(d.Year, d.Month, '01')\n\t\t// })\n\t\t//\n\t\t// // unpivot the data\n\t\t// var newArray = []\n\t\t// vis.data.forEach(d => {\n\t\t// \tnewArray.push({Date: d.NewDate, Breed: 'West', Score: d.West,})\n\t\t// \tnewArray.push({Date: d.NewDate, Breed: 'Labrador', Score: d.Labrador})\n\t\t// })\n\n\n\t\tconsole.log(vis.data)\n\t\t//console.log(newArray)\n\n\t\t// // scales\n\t\t// vis.x = d3.scaleTime().range([0, WIDTH])\n\t\t// vis.y = d3.scaleLinear().range([HEIGHT, 0])\n\t\t//\n\t\t//\n\t\t// // axis generators\n\t\t// vis.xAxisCall = d3.axisBottom()\n\t\t// vis.yAxisCall = d3.axisLeft()\n\t\t// \t.ticks(6)\n\t\t// \t.tickFormat(d3.format('.3s'))\n\t\t//\n\t\t// // axis groups\n\t\t// vis.xAxis = vis.g.append(\"g\")\n\t\t// \t.attr(\"class\", \"x axis\")\n\t\t// \t.attr(\"transform\", `translate(0, ${HEIGHT})`)\n\t\t// vis.yAxis = vis.g.append(\"g\")\n\t\t// \t.attr(\"class\", \"y axis\")\n\n\t\t// Path generator\n\n\t\tvis.update(vis.data)\n\t}\n\n\tupdate(data) {\n\t\tlet vis = this\n\n\t\tvar lineColumn ='Breed';\n\t\tvar xColumn = \"Date\";\n\t\tvar yColumn = \"Score\";\n\n\t\t// vis.x.domain(d3.extent(data, d => d.Date))\n\t\t// vis.y.domain([0, d3.max(data, d => d.Score)])\n\t\t//\n\t\t// // generate axes once scales have been set\n\t\t// vis.xAxis.call(vis.xAxisCall.scale(vis.x))\n\t\t// vis.yAxis.call(vis.yAxisCall.scale(vis.y))\n\t\t//\n\t\t// console.log(data)\n\t\t// var nested = Array.from(d3.group(data, d => d[lineColumn]),([key, value]) => ({key, value}));\n\t\t//\n\t\t// console.log(nested)\n\t\t//\n\t\t//\n\t\t// const line = d3.line()\n    // .x(function(d) { return vis.x(d[xColumn]); })\n    // .y(function(d) { return vis.y(d[yColumn]); });\n\t\t//\n\t\t// var paths = vis.g.selectAll(\".chart-line\").data(nested);\n\t\t// paths.enter().append(\"path\").attr(\"class\", \"chart-line\")\n\t\t// //paths.exit().remove();\n\t\t// paths.attr(\"d\", function (d){  return line(d.values);});\n\n\n\t}\n}\n\nexport default D3Chart\n"]},"metadata":{},"sourceType":"module"}