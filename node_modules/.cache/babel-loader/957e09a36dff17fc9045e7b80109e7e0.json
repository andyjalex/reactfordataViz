{"ast":null,"code":"import * as d3 from 'd3';\nconst MARGIN = {\n  TOP: 10,\n  BOTTOM: 80,\n  LEFT: 70,\n  RIGHT: 10\n};\nconst WIDTH = 500 - MARGIN.LEFT - MARGIN.RIGHT;\nconst HEIGHT = 300 - MARGIN.TOP - MARGIN.BOTTOM;\n\nclass D3Chart {\n  constructor(element, data) {\n    let vis = this;\n    vis.data = data;\n    vis.g = d3.select(element).append(\"svg\").attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT).attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM).append(\"g\").attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`); // need to clean up data.\n    // vis.data.forEach(d => {\n    //   d.Year = d.Month.substr(0,4)\n    // \td.Month = d.Month.substr(5,2)\n    // })\n    // vis.data.forEach(d => {\n    // \td.NewDate = new Date(d.Year, d.Month, '01')\n    // })\n    // Accepts the array and key\n\n    const groupBy = (array, key) => {\n      // Return the end result\n      return array.reduce((result, currentValue) => {\n        // If an array already present for key, push it to the array. Else create an array and push the object\n        (result[currentValue[key]] = result[currentValue[key]] || []).push(currentValue); // Return the current iteration `result` value, this will be taken as next iteration `result` value and accumulate\n\n        return result;\n      }, {}); // empty object is the initial value for result object\n    };\n\n    console.log(groupBy(vis.data, 'West')); //\n    // var groupedData = d3.group()\n    //   .key(function (d) { console.log(d.Year); return d.Year; })\n    //   .entries(vis.data);\n    //\n    // console.log(groupedData)\n    // var cars = [\n    //         { name: \"car1\", manufactured: \"1950\", model: \"s51\" },\n    //         { name: \"car1\", manufactured: \"1950\", model: \"s51\" },\n    //         { name: \"car1\", manufactured: \"1951\", model: \"s50\" },\n    //         { name: \"car1\", manufactured: \"1951\", model: \"s50\" },\n    //     ];\n    //     var groupedData = d3.group(vis.data, d => d.NewDate)\n    //     console.log(\"ArrayData :\", groupedData);\n    // vis.x = d3.scaleLinear()\n    // \t.domain([0 , d3.max(vis.data, d => Number(d.age))])\n    // \t.range([0, WIDTH])\n    //\n    // vis.y = d3.scaleLinear()\n    // \t.domain([0, d3.max(vis.data, d => Number(d.height))])\n    // \t.range([HEIGHT, 0 ])\n    //\n    // console.log(vis.x(6))\n\n    vis.update();\n  }\n\n  update() {\n    let vis = this;\n  }\n\n}\n\nexport default D3Chart;","map":{"version":3,"sources":["/Users/andyalexander/Documents/d3/React/reactfordataviz/src/D3Chart.js"],"names":["d3","MARGIN","TOP","BOTTOM","LEFT","RIGHT","WIDTH","HEIGHT","D3Chart","constructor","element","data","vis","g","select","append","attr","groupBy","array","key","reduce","result","currentValue","push","console","log","update"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AAEA,MAAMC,MAAM,GAAG;AAAEC,EAAAA,GAAG,EAAE,EAAP;AAAWC,EAAAA,MAAM,EAAE,EAAnB;AAAuBC,EAAAA,IAAI,EAAE,EAA7B;AAAiCC,EAAAA,KAAK,EAAE;AAAxC,CAAf;AACA,MAAMC,KAAK,GAAG,MAAML,MAAM,CAACG,IAAb,GAAoBH,MAAM,CAACI,KAAzC;AACA,MAAME,MAAM,GAAG,MAAMN,MAAM,CAACC,GAAb,GAAmBD,MAAM,CAACE,MAAzC;;AAEA,MAAMK,OAAN,CAAc;AACbC,EAAAA,WAAW,CAACC,OAAD,EAAUC,IAAV,EAAgB;AAC1B,QAAIC,GAAG,GAAG,IAAV;AAEEA,IAAAA,GAAG,CAACD,IAAJ,GAAWA,IAAX;AAEFC,IAAAA,GAAG,CAACC,CAAJ,GAAQb,EAAE,CAACc,MAAH,CAAUJ,OAAV,EACNK,MADM,CACC,KADD,EAELC,IAFK,CAEA,OAFA,EAESV,KAAK,GAAGL,MAAM,CAACG,IAAf,GAAsBH,MAAM,CAACI,KAFtC,EAGLW,IAHK,CAGA,QAHA,EAGUT,MAAM,GAAGN,MAAM,CAACC,GAAhB,GAAsBD,MAAM,CAACE,MAHvC,EAINY,MAJM,CAIC,GAJD,EAKLC,IALK,CAKA,WALA,EAKc,aAAYf,MAAM,CAACG,IAAK,KAAIH,MAAM,CAACC,GAAI,GALrD,CAAR,CAL0B,CAcxB;AACF;AACC;AACD;AACC;AACD;AACA;AACA;AAEA;;AACA,UAAMe,OAAO,GAAG,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC9B;AACA,aAAOD,KAAK,CAACE,MAAN,CAAa,CAACC,MAAD,EAASC,YAAT,KAA0B;AAC5C;AACA,SAACD,MAAM,CAACC,YAAY,CAACH,GAAD,CAAb,CAAN,GAA4BE,MAAM,CAACC,YAAY,CAACH,GAAD,CAAb,CAAN,IAA6B,EAA1D,EAA8DI,IAA9D,CACED,YADF,EAF4C,CAK5C;;AACA,eAAOD,MAAP;AACD,OAPM,EAOJ,EAPI,CAAP,CAF8B,CAStB;AACT,KAVD;;AAeAG,IAAAA,OAAO,CAACC,GAAR,CAAYR,OAAO,CAACL,GAAG,CAACD,IAAL,EAAW,MAAX,CAAnB,EAvC0B,CAyC1B;AACA;AACE;AACA;AACF;AACA;AAEA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AAGF;AACA;AACA;AACE;AACD;AACD;AACA;AACE;AACF;;AACAC,IAAAA,GAAG,CAACc,MAAJ;AACA;;AAEDA,EAAAA,MAAM,GAAG;AACR,QAAId,GAAG,GAAG,IAAV;AAEA;;AA1EY;;AA6Ed,eAAeJ,OAAf","sourcesContent":["import * as d3 from 'd3'\n\nconst MARGIN = { TOP: 10, BOTTOM: 80, LEFT: 70, RIGHT: 10 }\nconst WIDTH = 500 - MARGIN.LEFT - MARGIN.RIGHT\nconst HEIGHT = 300 - MARGIN.TOP - MARGIN.BOTTOM\n\nclass D3Chart {\n\tconstructor(element, data) {\n\t\tlet vis = this\n\n    vis.data = data;\n\n\t\tvis.g = d3.select(element)\n\t\t\t.append(\"svg\")\n\t\t\t\t.attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\n\t\t\t\t.attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\n\t\t\t.append(\"g\")\n\t\t\t\t.attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\n\n\n\n    // need to clean up data.\n\t\t// vis.data.forEach(d => {\n\t  //   d.Year = d.Month.substr(0,4)\n\t\t// \td.Month = d.Month.substr(5,2)\n\t  // })\n\t\t// vis.data.forEach(d => {\n\t\t// \td.NewDate = new Date(d.Year, d.Month, '01')\n\t\t// })\n\n\t\t// Accepts the array and key\n\t\tconst groupBy = (array, key) => {\n\t\t  // Return the end result\n\t\t  return array.reduce((result, currentValue) => {\n\t\t    // If an array already present for key, push it to the array. Else create an array and push the object\n\t\t    (result[currentValue[key]] = result[currentValue[key]] || []).push(\n\t\t      currentValue\n\t\t    );\n\t\t    // Return the current iteration `result` value, this will be taken as next iteration `result` value and accumulate\n\t\t    return result;\n\t\t  }, {}); // empty object is the initial value for result object\n\t\t};\n\n\n\n\n\t\tconsole.log(groupBy(vis.data, 'West'))\n\n\t\t//\n\t\t// var groupedData = d3.group()\n    //   .key(function (d) { console.log(d.Year); return d.Year; })\n    //   .entries(vis.data);\n\t\t//\n\t\t// console.log(groupedData)\n\n\t\t// var cars = [\n    //         { name: \"car1\", manufactured: \"1950\", model: \"s51\" },\n    //         { name: \"car1\", manufactured: \"1950\", model: \"s51\" },\n    //         { name: \"car1\", manufactured: \"1951\", model: \"s50\" },\n    //         { name: \"car1\", manufactured: \"1951\", model: \"s50\" },\n    //     ];\n    //     var groupedData = d3.group(vis.data, d => d.NewDate)\n    //     console.log(\"ArrayData :\", groupedData);\n\n\n\t\t// vis.x = d3.scaleLinear()\n\t\t// \t.domain([0 , d3.max(vis.data, d => Number(d.age))])\n\t\t// \t.range([0, WIDTH])\n    //\n\t \t// vis.y = d3.scaleLinear()\n\t\t// \t.domain([0, d3.max(vis.data, d => Number(d.height))])\n\t\t// \t.range([HEIGHT, 0 ])\n    //\n\t\t// console.log(vis.x(6))\n\t\tvis.update()\n\t}\n\n\tupdate() {\n\t\tlet vis = this\n\n\t}\n}\n\nexport default D3Chart\n"]},"metadata":{},"sourceType":"module"}