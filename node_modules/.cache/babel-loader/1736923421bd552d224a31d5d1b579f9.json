{"ast":null,"code":"var _jsxFileName = \"/Users/andyalexander/Documents/d3/React/reactfordataviz/src/components/Dropdown.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dropdown = _ref => {\n  _s();\n\n  let {\n    label,\n    options,\n    selected,\n    onSelectedChange\n  } = _ref;\n  return function (options) {\n    const [open, setOpen] = useState(false);\n    const ref = useRef();\n    var options = [];\n    useEffect(() => {\n      const onBodyClick = event => {\n        if (ref.current.contains(event.target)) {\n          //comes from UI form. Maybe a multi select wouldn't want to do this?\n          return;\n        }\n\n        ;\n        setOpen(false);\n      };\n\n      document.body.addEventListener(\"click\", onBodyClick, {\n        capture: true\n      });\n      return () => {\n        document.body.removeEventListener(\"click\", onBodyClick, {\n          capture: true\n        });\n      };\n    }, []);\n\n    const onHandleChange = option => {\n      console.log(option);\n      console.log(open); //add options to an array to then send to app via onSelectedChange\n      //onSelectedChange(option(s))\n    };\n\n    const renderedOptions = options.map(option => {\n      if (option.value === selected.value) {\n        return null;\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        onClick: () => onHandleChange(option),\n        children: option.label\n      }, option.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, _this);\n    });\n\n    const onHandleOpen = event => {\n      if (event.target.className !== 'item') {\n        setOpen(!open);\n      }\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref,\n      className: \"ui form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: e => onHandleOpen(e),\n          className: `ui selection dropdown ${open ? 'visible active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"dropdown icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text\",\n            children: selected.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 11\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => setOpen(true),\n            className: `menu ${open ? 'visible transition' : ''}`,\n            children: renderedOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 11\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, _this);\n  }(options);\n};\n\n_s(Dropdown, \"/6at3BdIBUpNeWkNnyUwLy0YywQ=\");\n\n_c = Dropdown;\nexport default Dropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"sources":["/Users/andyalexander/Documents/d3/React/reactfordataviz/src/components/Dropdown.js"],"names":["React","useState","useEffect","useRef","Dropdown","label","options","selected","onSelectedChange","open","setOpen","ref","onBodyClick","event","current","contains","target","document","body","addEventListener","capture","removeEventListener","onHandleChange","option","console","log","renderedOptions","map","value","onHandleOpen","className","e"],"mappings":"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","sourcesContent":["import React, { useState , useEffect, useRef } from 'react';\n\n\nconst Dropdown = ({ label, options, selected, onSelectedChange }) => {\n  const [open, setOpen ] = useState(false);\n  const ref = useRef();\n  var options = []\n\n  useEffect(() => {\n    const onBodyClick = (event) => {\n      if(ref.current.contains(event.target)) {\n        //comes from UI form. Maybe a multi select wouldn't want to do this?\n        return;\n      };\n\n      setOpen(false);\n    };\n\n\n    document.body.addEventListener(\"click\", onBodyClick, { capture: true });\n\n    return () => {\n      document.body.removeEventListener(\"click\", onBodyClick, {\n        capture: true,\n      });\n\n    };\n  }, []);\n\n  const onHandleChange = (option) => {\n    console.log(option)\n    console.log(open)\n\n    //add options to an array to then send to app via onSelectedChange\n\n    //onSelectedChange(option(s))\n  }\n\n  const renderedOptions = options.map((option) => {\n    if (option.value === selected.value) {\n      return null;\n    }\n    return (\n      <div\n        key={option.value}\n        className=\"item\"\n        onClick={() => onHandleChange(option)}\n        >\n        {option.label}\n      </div>\n    );\n  })\n\n  const onHandleOpen = (event) => {\n\n    if(event.target.className !== 'item') {\n      setOpen(!open)\n    }\n\n  }\n\n  return (\n    <div ref={ref} className=\"ui form\">\n      <div className=\"field\">\n        <label className=\"label\">{label}</label>\n        <div\n          onClick={(e) => onHandleOpen(e)}\n          className={`ui selection dropdown ${open ? 'visible active': ''}`}\n        >\n          <i className=\"dropdown icon\"></i>\n          <div className=\"text\">{selected.label}</div>\n          <div\n            onClick={() => setOpen(true)}\n            className={`menu ${open ? 'visible transition': ''}`}\n          >\n          {renderedOptions}\n        </div>\n      </div>\n    </div>\n  </div>\n  );\n};\n\nexport default Dropdown;\n"]},"metadata":{},"sourceType":"module"}