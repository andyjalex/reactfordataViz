{"ast":null,"code":"var _jsxFileName = \"/Users/andyalexander/Documents/d3/React/reactfordataviz/src/components/Dropdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dropdown = _ref => {\n  _s();\n\n  let {\n    label,\n    options,\n    selected,\n    onSelectedChange\n  } = _ref;\n  const [open, setOpen] = useState(false);\n  const ref = useRef();\n  var multiOptions = [];\n  useEffect(() => {\n    const onBodyClick = event => {\n      if (ref.current.contains(event.target)) {\n        //comes from UI form. Maybe a multi select wouldn't want to do this?\n        return;\n      }\n\n      ;\n      setOpen(false);\n    };\n\n    document.body.addEventListener(\"click\", onBodyClick, {\n      capture: true\n    });\n    return () => {\n      document.body.removeEventListener(\"click\", onBodyClick, {\n        capture: true\n      });\n    };\n  }, []);\n\n  const onHandleChange = option => {\n    console.log(option);\n    console.log(open); //if option is in multi don't add else add\n    //if()\n\n    multiOptions.push(option);\n    console.log(multiOptions);\n    multiOptions.map(option => {\n      console.log('booom');\n      console.log(option.value);\n    });\n    console.log(option.label); //add options to an array to then send to app via onSelectedChange\n    //onSelectedChange(option(s))\n  };\n\n  const renderedOptions = options.map(option => {\n    if (option.value === selected.value) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item\",\n      onClick: () => onHandleChange(option),\n      children: option.label\n    }, option.value, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  });\n\n  const onHandleOpen = event => {\n    if (event.target.className !== 'item') {\n      setOpen(!open);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    className: \"ui form\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"label\",\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: e => onHandleOpen(e),\n        className: `ui selection dropdown ${open ? 'visible active' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"dropdown icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text\",\n          children: selected.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => setOpen(true),\n          className: `menu ${open ? 'visible transition' : ''}`,\n          children: renderedOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dropdown, \"/6at3BdIBUpNeWkNnyUwLy0YywQ=\");\n\n_c = Dropdown;\nexport default Dropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"sources":["/Users/andyalexander/Documents/d3/React/reactfordataviz/src/components/Dropdown.js"],"names":["React","useState","useEffect","useRef","Dropdown","label","options","selected","onSelectedChange","open","setOpen","ref","multiOptions","onBodyClick","event","current","contains","target","document","body","addEventListener","capture","removeEventListener","onHandleChange","option","console","log","push","map","value","renderedOptions","onHandleOpen","className","e"],"mappings":"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","sourcesContent":["import React, { useState , useEffect, useRef } from 'react';\n\n\nconst Dropdown = ({ label, options, selected, onSelectedChange }) => {\n  const [open, setOpen ] = useState(false);\n  const ref = useRef();\n  var multiOptions = []\n\n  useEffect(() => {\n    const onBodyClick = (event) => {\n      if(ref.current.contains(event.target)) {\n        //comes from UI form. Maybe a multi select wouldn't want to do this?\n        return;\n      };\n\n      setOpen(false);\n    };\n\n\n    document.body.addEventListener(\"click\", onBodyClick, { capture: true });\n\n    return () => {\n      document.body.removeEventListener(\"click\", onBodyClick, {\n        capture: true,\n      });\n\n    };\n  }, []);\n\n  const onHandleChange = (option) => {\n    console.log(option)\n    console.log(open)\n\n    //if option is in multi don't add else add\n    //if()\n    multiOptions.push(option)\n    console.log(multiOptions)\n\n    multiOptions.map((option) => {\n      console.log('booom')\n      console.log(option.value)\n    })\n    console.log(option.label)\n\n    //add options to an array to then send to app via onSelectedChange\n\n    //onSelectedChange(option(s))\n  }\n\n  const renderedOptions = options.map((option) => {\n    if (option.value === selected.value) {\n      return null;\n    }\n    return (\n      <div\n        key={option.value}\n        className=\"item\"\n        onClick={() => onHandleChange(option)}\n        >\n        {option.label}\n      </div>\n    );\n  })\n\n  const onHandleOpen = (event) => {\n\n    if(event.target.className !== 'item') {\n      setOpen(!open)\n    }\n\n  }\n\n  return (\n    <div ref={ref} className=\"ui form\">\n      <div className=\"field\">\n        <label className=\"label\">{label}</label>\n        <div\n          onClick={(e) => onHandleOpen(e)}\n          className={`ui selection dropdown ${open ? 'visible active': ''}`}\n        >\n          <i className=\"dropdown icon\"></i>\n          <div className=\"text\">{selected.label}</div>\n          <div\n            onClick={() => setOpen(true)}\n            className={`menu ${open ? 'visible transition': ''}`}\n          >\n          {renderedOptions}\n        </div>\n      </div>\n    </div>\n  </div>\n  );\n};\n\nexport default Dropdown;\n"]},"metadata":{},"sourceType":"module"}