{"ast":null,"code":"var _jsxFileName = \"/Users/andyalexander/Documents/d3/React/reactfordataviz/src/components/Dropdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dropdown = _ref => {\n  _s();\n\n  let {\n    label,\n    options,\n    selected,\n    onSelectedChange\n  } = _ref;\n  const [open, setOpen] = useState(false);\n  const ref = useRef();\n  useEffect(() => {\n    const onBodyClick = event => {\n      if (ref.current.contains(event.target)) {\n        //comes from UI form. Maybe a multi select wouldn't want to do this?\n        return;\n      }\n\n      ;\n      console.log(open);\n      setOpen(false);\n    };\n\n    document.body.addEventListener(\"click\", onBodyClick, {\n      capture: true\n    });\n    return () => {\n      document.body.removeEventListener(\"click\", onBodyClick, {\n        capture: true\n      });\n    };\n  }, []);\n\n  const onChange = option => {\n    console.log(option);\n  };\n\n  const renderedOptions = options.map(option => {\n    if (option.value === selected.value) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item\",\n      onClick: () => onChange(option),\n      children: option.label\n    }, option.value, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    className: \"ui form\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"field\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"label\",\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => setOpen(!open),\n        className: `ui selection dropdown ${open ? 'visible active' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"dropdown icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text\",\n          children: selected.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `menu ${open ? 'visible transition' : ''}`,\n          children: renderedOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dropdown, \"/6at3BdIBUpNeWkNnyUwLy0YywQ=\");\n\n_c = Dropdown;\nexport default Dropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"sources":["/Users/andyalexander/Documents/d3/React/reactfordataviz/src/components/Dropdown.js"],"names":["React","useState","useEffect","useRef","Dropdown","label","options","selected","onSelectedChange","open","setOpen","ref","onBodyClick","event","current","contains","target","console","log","document","body","addEventListener","capture","removeEventListener","onChange","option","renderedOptions","map","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA2BC,SAA3B,EAAsCC,MAAtC,QAAoD,OAApD;;;AAGA,MAAMC,QAAQ,GAAG,QAAoD;AAAA;;AAAA,MAAnD;AAAEC,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA,QAAlB;AAA4BC,IAAAA;AAA5B,GAAmD;AACnE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAmBT,QAAQ,CAAC,KAAD,CAAjC;AACA,QAAMU,GAAG,GAAGR,MAAM,EAAlB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,WAAW,GAAIC,KAAD,IAAW;AAC7B,UAAGF,GAAG,CAACG,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAAH,EAAuC;AACrC;AACA;AACD;;AAAA;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACAC,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD,KAPD;;AASAS,IAAAA,QAAQ,CAACC,IAAT,CAAcC,gBAAd,CAA+B,OAA/B,EAAwCT,WAAxC,EAAqD;AAAEU,MAAAA,OAAO,EAAE;AAAX,KAArD;AAEA,WAAO,MAAM;AACXH,MAAAA,QAAQ,CAACC,IAAT,CAAcG,mBAAd,CAAkC,OAAlC,EAA2CX,WAA3C,EAAwD;AACtDU,QAAAA,OAAO,EAAE;AAD6C,OAAxD;AAID,KALD;AAMD,GAlBQ,EAkBN,EAlBM,CAAT;;AAoBA,QAAME,QAAQ,GAAIC,MAAD,IAAY;AAC3BR,IAAAA,OAAO,CAACC,GAAR,CAAYO,MAAZ;AACD,GAFD;;AAIA,QAAMC,eAAe,GAAGpB,OAAO,CAACqB,GAAR,CAAaF,MAAD,IAAY;AAC9C,QAAIA,MAAM,CAACG,KAAP,KAAiBrB,QAAQ,CAACqB,KAA9B,EAAqC;AACnC,aAAO,IAAP;AACD;;AACD,wBACE;AAEE,MAAA,SAAS,EAAC,MAFZ;AAGE,MAAA,OAAO,EAAE,MAAMJ,QAAQ,CAACC,MAAD,CAHzB;AAAA,gBAKGA,MAAM,CAACpB;AALV,OACOoB,MAAM,CAACG,KADd;AAAA;AAAA;AAAA;AAAA,YADF;AASD,GAbuB,CAAxB;AAcA,sBACE;AAAK,IAAA,GAAG,EAAEjB,GAAV;AAAe,IAAA,SAAS,EAAC,SAAzB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA,kBAA0BN;AAA1B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,OAAO,EAAE,MAAMK,OAAO,CAAC,CAACD,IAAF,CADxB;AAEE,QAAA,SAAS,EAAG,yBAAwBA,IAAI,GAAG,gBAAH,GAAqB,EAAG,EAFlE;AAAA,gCAIE;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,oBAAuBF,QAAQ,CAACF;AAAhC;AAAA;AAAA;AAAA;AAAA,gBALF,eAME;AAAK,UAAA,SAAS,EAAG,QAAOI,IAAI,GAAG,oBAAH,GAAyB,EAAG,EAAxD;AAAA,oBAA4DiB;AAA5D;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CA1DD;;GAAMtB,Q;;KAAAA,Q;AA4DN,eAAeA,QAAf","sourcesContent":["import React, { useState , useEffect, useRef } from 'react';\n\n\nconst Dropdown = ({ label, options, selected, onSelectedChange }) => {\n  const [open, setOpen ] = useState(false);\n  const ref = useRef();\n\n  useEffect(() => {\n    const onBodyClick = (event) => {\n      if(ref.current.contains(event.target)) {\n        //comes from UI form. Maybe a multi select wouldn't want to do this?\n        return;\n      };\n      console.log(open)\n      setOpen(false);\n    };\n\n    document.body.addEventListener(\"click\", onBodyClick, { capture: true });\n\n    return () => {\n      document.body.removeEventListener(\"click\", onBodyClick, {\n        capture: true,\n      });\n\n    };\n  }, []);\n\n  const onChange = (option) => {\n    console.log(option)\n  }\n\n  const renderedOptions = options.map((option) => {\n    if (option.value === selected.value) {\n      return null;\n    }\n    return (\n      <div\n        key={option.value}\n        className=\"item\"\n        onClick={() => onChange(option)}\n        >\n        {option.label}\n      </div>\n    );\n  })\n  return (\n    <div ref={ref} className=\"ui form\">\n      <div className=\"field\">\n        <label className=\"label\">{label}</label>\n        <div\n          onClick={() => setOpen(!open)}\n          className={`ui selection dropdown ${open ? 'visible active': ''}`}\n        >\n          <i className=\"dropdown icon\"></i>\n          <div className=\"text\">{selected.label}</div>\n          <div className={`menu ${open ? 'visible transition': ''}`}>{renderedOptions}\n        </div>\n      </div>\n    </div>\n  </div>\n  );\n};\n\nexport default Dropdown;\n"]},"metadata":{},"sourceType":"module"}