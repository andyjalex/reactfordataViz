{"ast":null,"code":"import * as d3 from 'd3';\nconst MARGIN = {\n  TOP: 20,\n  BOTTOM: 70,\n  LEFT: 70,\n  RIGHT: 10\n};\nconst WIDTH = 1000 - MARGIN.LEFT - MARGIN.RIGHT;\nconst HEIGHT = 300 - MARGIN.TOP - MARGIN.BOTTOM;\n\nclass D3Chart {\n  constructor(element, data, breed) {\n    let vis = this;\n    vis.data = data;\n    var xColumn = \"Date\";\n    var yColumn = \"Score\";\n    vis.g = d3.select(element).append(\"svg\").attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT).attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM).append(\"g\").attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`);\n    var numOfCols = Object.keys(vis.data[0]).length;\n    var numOfDogs = numOfCols - 2; // scales\n\n    vis.x = d3.scaleTime().range([0, WIDTH]);\n    vis.y = d3.scaleLinear().range([HEIGHT, 0]); // axis groups\n\n    vis.xAxis = vis.g.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", `translate(0, ${HEIGHT})`);\n    vis.yAxis = vis.g.append(\"g\").attr(\"class\", \"y axis\"); // Path generator\n\n    console.log(breed);\n    vis.update(vis.data, breed);\n  }\n\n  update(data, breed) {\n    let vis = this; //simplify to an array\n\n    var breedArray = breed.map(obj => {\n      return obj.value;\n    });\n    data.forEach(d => {\n      d.year = d.Month.substr(0, 4);\n      d.month = d.Month.substr(5, 2);\n      d.west = Number(d.West_Highland_White_Terrier);\n      d.retriever = Number(d.Golden_Retriever);\n      d.labrador = Number(d.Labrador_Retriever);\n      d.dalmatian = Number(d.Dalmatian);\n      d.cockapoo = Number(d.Cockapoo); // d.labrador = Number(d.Labrador)\n    });\n    data.forEach(d => {\n      d.NewDate = new Date(d.year, d.month, '01');\n    }); // unpivot the data\n\n    var newArray = [];\n    data.forEach(d => {\n      //needs to be refactored to be dynamic\n      //loop for var numOfDogs\n      newArray.push({\n        Date: d.NewDate,\n        Breed: 'West Highland Terrier',\n        Score: d.west\n      });\n      newArray.push({\n        Date: d.NewDate,\n        Breed: 'Retriever',\n        Score: d.retriever\n      });\n      newArray.push({\n        Date: d.NewDate,\n        Breed: 'Labrador',\n        Score: d.labrador\n      });\n      newArray.push({\n        Date: d.NewDate,\n        Breed: 'Dalmatian',\n        Score: d.dalmatian\n      });\n      newArray.push({\n        Date: d.NewDate,\n        Breed: 'Cockapoo',\n        Score: d.cockapoo\n      });\n    });\n    const newData = newArray.filter(item => breedArray.includes(item.Breed));\n    newData.forEach(d => {\n      if (d.Score !== d.Score) {\n        d.Score = 0;\n      }\n    });\n    console.log(newData);\n    var lineColumn = 'Breed';\n    var xColumn = \"Date\";\n    var yColumn = \"Score\";\n    vis.y.domain([0, d3.max(newData, d => d.Score)]);\n    vis.x.domain(d3.extent(newData, d => d.Date)); // generate axes once scales have been set\n\n    vis.xAxisCall = d3.axisBottom();\n    vis.xAxis.call(vis.xAxisCall.scale(vis.x));\n    vis.yAxisCall = d3.axisLeft().ticks(6).tickFormat(d3.format('.3s'));\n    vis.yAxis.call(vis.yAxisCall.scale(vis.y));\n    var nested = Array.from(d3.group(newData, d => d[lineColumn]), _ref => {\n      let [key, value] = _ref;\n      return {\n        key,\n        value\n      };\n    }); //console.log(nested)\n    // set the colour scale\n\n    var color = d3.scaleOrdinal(d3.schemeCategory10); // spacing for the legend\n\n    var legendSpace = WIDTH / nested.length; //nested.map((i) => console.log(i.value));\n\n    var paths = vis.g.selectAll('.lineTest').data(nested, d => d.Breed);\n    console.log(paths);\n    paths.exit().transition().duration(500).remove(); // //update\n    // paths.transition().duration(500)\n    // .attr(\"d\", function(d){\n    // \t\t\t\treturn d3.line()\n    // \t\t\t\t.x(function(d) { return vis.x(d[xColumn]); })\n    // \t\t\t\t.y(function(d) { return vis.y(d[yColumn]) })\n    // \t\t\t\t(d.value)\n    // \t\t\t})\n    //enter\n\n    paths.enter().append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", function (d) {\n      return color(d.key);\n    }).attr(\"stroke-width\", 2).attr(\"class\", \"lineTest\").merge(paths).transition().duration(1000).attr(\"stroke\", function (d) {\n      return color(d.key);\n    }).attr(\"d\", function (d) {\n      return d3.line().x(function (d) {\n        return vis.x(d[xColumn]);\n      }).y(function (d) {\n        return vis.y(d[yColumn]);\n      })(d.value);\n    });\n    vis.g.selectAll('.legend').remove();\n    const legends = vis.g.selectAll('.legend').data(nested, function (d) {\n      return d.key; // always try and use a key function to uniquely identify\n    });\n    legends.enter().append(\"text\").attr(\"x\", function (d, i) {\n      return legendSpace / 2 + i * legendSpace;\n    }) // space legend\n    .attr(\"y\", HEIGHT + MARGIN.BOTTOM / 2 + 5).attr(\"class\", \"legend\") // style the legend\n    .style(\"fill\", function (d) {\n      // Add the colours dynamically\n      return d.color = color(d.key);\n    }).text(function (d) {\n      return d.key;\n    }); // nested.forEach(function(d,i) {\n    // \t// Add the Legend\n    //   vis.g.append(\"text\")\n    //       .attr(\"x\", (legendSpace/2)+i*legendSpace)  // space legend\n    //       .attr(\"y\", HEIGHT + (MARGIN.BOTTOM/2)+ 5)\n    //       .attr(\"class\", \"legend\")    // style the legend\n    //       .style(\"fill\", function() { // Add the colours dynamically\n    //           return d.color = color(d.key); })\n    //       .text(d.key);\n    // })\n  }\n\n}\n\nexport default D3Chart;","map":{"version":3,"sources":["/Users/andyalexander/Documents/d3/React/reactfordataviz/src/components/D3Chart.js"],"names":["d3","MARGIN","TOP","BOTTOM","LEFT","RIGHT","WIDTH","HEIGHT","D3Chart","constructor","element","data","breed","vis","xColumn","yColumn","g","select","append","attr","numOfCols","Object","keys","length","numOfDogs","x","scaleTime","range","y","scaleLinear","xAxis","yAxis","console","log","update","breedArray","map","obj","value","forEach","d","year","Month","substr","month","west","Number","West_Highland_White_Terrier","retriever","Golden_Retriever","labrador","Labrador_Retriever","dalmatian","Dalmatian","cockapoo","Cockapoo","NewDate","Date","newArray","push","Breed","Score","newData","filter","item","includes","lineColumn","domain","max","extent","xAxisCall","axisBottom","call","scale","yAxisCall","axisLeft","ticks","tickFormat","format","nested","Array","from","group","key","color","scaleOrdinal","schemeCategory10","legendSpace","paths","selectAll","exit","transition","duration","remove","enter","merge","line","legends","i","style","text"],"mappings":"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","sourcesContent":["import * as d3 from 'd3'\n\n\nconst MARGIN = { TOP: 20, BOTTOM: 70, LEFT: 70, RIGHT: 10 }\nconst WIDTH = 1000 - MARGIN.LEFT - MARGIN.RIGHT\nconst HEIGHT = 300 - MARGIN.TOP - MARGIN.BOTTOM\n\nclass D3Chart {\n\tconstructor(element, data, breed) {\n\t\tlet vis = this\n\n    vis.data = data;\n\t\tvar xColumn = \"Date\"\n\t\tvar yColumn = \"Score\"\n\n\t\tvis.g = d3.select(element)\n\t\t\t.append(\"svg\")\n\t\t\t\t.attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\n\t\t\t\t.attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\n\t\t\t.append(\"g\")\n\t\t\t\t.attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\n\n\t\tvar numOfCols = Object.keys(vis.data[0]).length\n\n\t\tvar numOfDogs = numOfCols-2\n\n\t\t// scales\n\t\tvis.x = d3.scaleTime()\n\t\t\t.range([0, WIDTH])\n\n\t\tvis.y = d3.scaleLinear()\n\t\t\t.range([HEIGHT, 0])\n\n\t\t// axis groups\n\t\tvis.xAxis = vis.g.append(\"g\")\n\t\t\t.attr(\"class\", \"x axis\")\n\t\t\t.attr(\"transform\", `translate(0, ${HEIGHT})`)\n\t\tvis.yAxis = vis.g.append(\"g\")\n\t\t\t.attr(\"class\", \"y axis\")\n\n\t\t// Path generator\n\t\tconsole.log(breed)\n\t\tvis.update(vis.data, breed)\n\t}\n\n\tupdate(data, breed) {\n\t\tlet vis = this\n\n\t\t//simplify to an array\n\t\tvar breedArray = breed.map((obj) => {\n\t\t\treturn obj.value\n\t\t})\n\t\tdata.forEach(d => {\n\t    d.year = d.Month.substr(0,4)\n\t\t\td.month = d.Month.substr(5,2)\n\t\t\td.west = Number(d.West_Highland_White_Terrier)\n\t\t\td.retriever = Number(d.Golden_Retriever)\n\t\t\td.labrador = Number(d.Labrador_Retriever)\n\t\t\td.dalmatian = Number(d.Dalmatian)\n\t\t\td.cockapoo = Number(d.Cockapoo)\n\t\t\t// d.labrador = Number(d.Labrador)\n\t  })\n\t\tdata.forEach(d => {\n\t\t\td.NewDate = new Date(d.year, d.month, '01')\n\t\t})\n\n\t\t// unpivot the data\n\t\tvar newArray = []\n\t\tdata.forEach(d => {\n\t\t\t//needs to be refactored to be dynamic\n\t\t\t//loop for var numOfDogs\n\t\t\tnewArray.push({Date: d.NewDate, Breed: 'West Highland Terrier', Score: d.west})\n\t\t\tnewArray.push({Date: d.NewDate, Breed: 'Retriever', Score: d.retriever})\n\t\t\tnewArray.push({Date: d.NewDate, Breed: 'Labrador', Score: d.labrador})\n\t\t\tnewArray.push({Date: d.NewDate, Breed: 'Dalmatian', Score: d.dalmatian})\n\t\t\tnewArray.push({Date: d.NewDate, Breed: 'Cockapoo', Score: d.cockapoo})\n\t\t})\n\n\t\tconst newData = newArray.filter(item => breedArray.includes(item.Breed))\n\n\t\tnewData.forEach(d => {\n\t\t\tif(d.Score !== d.Score){\n    \t\td.Score = 0;\n\t\t\t}\n\t\t});\n\n\n\t\tconsole.log(newData)\n\n\n\t\tvar lineColumn ='Breed';\n\t\tvar xColumn = \"Date\";\n\t\tvar yColumn = \"Score\";\n\n\t\tvis.y.domain([0, d3.max(newData, d => d.Score)])\n\t\tvis.x.domain(d3.extent(newData, d => d.Date))\n\n\t\t// generate axes once scales have been set\n\t\tvis.xAxisCall = d3.axisBottom()\n\t\tvis.xAxis.call(vis.xAxisCall.scale(vis.x))\n\n\t\tvis.yAxisCall = d3.axisLeft()\n\t\t\t.ticks(6)\n\t\t\t.tickFormat(d3.format('.3s'))\n\t\tvis.yAxis.call(vis.yAxisCall.scale(vis.y))\n\n\t\tvar nested = Array.from(\n\t\t d3.group(newData, d => d[lineColumn]), ([key, value]) => ({key, value})\n\t );\n\t\t//console.log(nested)\n\n\t\t// set the colour scale\n    var color = d3.scaleOrdinal(d3.schemeCategory10);\n\n\t\t// spacing for the legend\n\t\tvar legendSpace = WIDTH/nested.length;\n\n\t\t//nested.map((i) => console.log(i.value));\n\n\t\tvar paths = vis.g.selectAll('.lineTest')\n\t\t.data(nested, d => d.Breed)\n\n\t\tconsole.log(paths)\n\t\tpaths.exit().transition().duration(500).remove()\n\n\t\t// //update\n\t\t// paths.transition().duration(500)\n\t\t// .attr(\"d\", function(d){\n\t\t// \t\t\t\treturn d3.line()\n\t\t// \t\t\t\t.x(function(d) { return vis.x(d[xColumn]); })\n\t\t// \t\t\t\t.y(function(d) { return vis.y(d[yColumn]) })\n\t\t// \t\t\t\t(d.value)\n\t\t// \t\t\t})\n\t\t//enter\n\t\tpaths.enter().append(\"path\")\n\t\t\t.attr(\"fill\", \"none\")\n\t\t\t.attr(\"stroke\", function(d){ return color(d.key) })\n\t\t\t.attr(\"stroke-width\", 2)\n\t\t\t.attr(\"class\",\"lineTest\")\n\t\t\t.merge(paths)\n\t\t\t.transition()\n    .duration(1000)\n\t\t\t.attr(\"stroke\", function(d){ return color(d.key) })\n\t\t\t.attr(\"d\", function(d){\n        return d3.line()\n          .x(function(d) { return vis.x(d[xColumn]); })\n          .y(function(d) { return vis.y(d[yColumn]) })\n          (d.value)\n      })\n\n\n\n\t\tvis.g.selectAll('.legend').remove()\n\t\tconst legends = vis.g.selectAll('.legend')\n\t\t.data(nested, function(d){\n    return d.key; // always try and use a key function to uniquely identify\n  \t});\n\n\t\tlegends.enter().append(\"text\")\n\t\t\t.attr(\"x\", function(d, i){ return (legendSpace/2)+i*legendSpace})  // space legend\n\t      .attr(\"y\", HEIGHT + (MARGIN.BOTTOM/2)+ 5)\n\t      .attr(\"class\", \"legend\")    // style the legend\n\t      .style(\"fill\", function(d) { // Add the colours dynamically\n\t          return d.color = color(d.key); })\n\t      .text(function(d){return d.key;})\n\n\n\t\t// nested.forEach(function(d,i) {\n\t\t// \t// Add the Legend\n    //   vis.g.append(\"text\")\n    //       .attr(\"x\", (legendSpace/2)+i*legendSpace)  // space legend\n    //       .attr(\"y\", HEIGHT + (MARGIN.BOTTOM/2)+ 5)\n    //       .attr(\"class\", \"legend\")    // style the legend\n    //       .style(\"fill\", function() { // Add the colours dynamically\n    //           return d.color = color(d.key); })\n    //       .text(d.key);\n\t\t// })\n\n\t}\n}\n\nexport default D3Chart\n"]},"metadata":{},"sourceType":"module"}