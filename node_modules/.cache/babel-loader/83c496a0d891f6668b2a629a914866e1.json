{"ast":null,"code":"import * as d3 from 'd3';\nconst MARGIN = {\n  TOP: 20,\n  BOTTOM: 70,\n  LEFT: 70,\n  RIGHT: 10\n};\nconst WIDTH = 1000 - MARGIN.LEFT - MARGIN.RIGHT;\nconst HEIGHT = 300 - MARGIN.TOP - MARGIN.BOTTOM;\n\nclass D3Chart {\n  constructor(element, data, breed) {\n    let vis = this;\n    vis.data = data;\n    var xColumn = \"Date\";\n    var yColumn = \"Score\";\n    vis.g = d3.select(element).append(\"svg\").attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT).attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM).append(\"g\").attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`);\n    var numOfCols = Object.keys(vis.data[0]).length;\n    var numOfDogs = numOfCols - 2; //console.log(numOfDogs)\n    //need to clean up data.\n    //console.log(newArray)\n    // axis groups\n\n    vis.xAxis = vis.g.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", `translate(0, ${HEIGHT})`);\n    vis.yAxis = vis.g.append(\"g\").attr(\"class\", \"y axis\"); // Path generator\n\n    console.log(breed);\n    vis.update(vis.data, breed);\n  }\n\n  update(data, breed) {\n    let vis = this;\n    console.log('hello');\n    console.log(data);\n    console.log(breed);\n    data.forEach(d => {\n      d.year = d.Month.substr(0, 4);\n      d.month = d.Month.substr(5, 2);\n      d.west = Number(d.West_Highland_White_Terrier);\n      d.retriever = Number(d.Golden_Retriever);\n      d.labrador = Number(d.Labrador_Retriever);\n      d.dalmatian = Number(d.Dalmatian); // d.west = Number(d.West)\n      // d.labrador = Number(d.Labrador)\n    });\n    data.forEach(d => {\n      d.NewDate = new Date(d.year, d.month, '01');\n    }); // unpivot the data\n\n    var newArray = [];\n    data.forEach(d => {\n      //needs to be refactored to be dynamic\n      //loop for var numOfDogs\n      newArray.push({\n        Date: d.NewDate,\n        Breed: 'Westie',\n        Score: d.west\n      });\n      newArray.push({\n        Date: d.NewDate,\n        Breed: 'Retriever',\n        Score: d.retriever\n      });\n      newArray.push({\n        Date: d.NewDate,\n        Breed: 'Labrador',\n        Score: d.labrador\n      });\n      newArray.push({\n        Date: d.NewDate,\n        Breed: 'Dalmatian',\n        Score: d.dalmatian\n      });\n    });\n    var newData = newArray;\n    var lineColumn = 'Breed';\n    var xColumn = \"Date\";\n    var yColumn = \"Score\"; // scales\n\n    const x = d3.scaleTime().domain(d3.extent(newData, d => d.Date)).range([0, WIDTH]);\n    const y = d3.scaleLinear().domain([0, d3.max(newData, d => d.Score)]).range([HEIGHT, 0]); // generate axes once scales have been set\n\n    vis.xAxisCall = d3.axisBottom();\n    vis.xAxis.call(vis.xAxisCall.scale(x));\n    vis.yAxisCall = d3.axisLeft().ticks(6).tickFormat(d3.format('.3s'));\n    vis.yAxis.call(vis.yAxisCall.scale(y));\n    var nested = Array.from(d3.group(newData, d => d[lineColumn]), _ref => {\n      let [key, value] = _ref;\n      return {\n        key,\n        value\n      };\n    }); //console.log(nested)\n    // set the colour scale\n\n    var color = d3.scaleOrdinal(d3.schemeCategory10); // spacing for the legend\n\n    var legendSpace = WIDTH / nested.length; //nested.map((i) => console.log(i.value));\n\n    const paths = vis.g.selectAll('.line').data(nested);\n    paths.exit().remove();\n    paths.enter().append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", function (d) {\n      return color(d.key);\n    }).attr(\"stroke-width\", 2).attr(\"d\", function (d) {\n      return d3.line().x(function (d) {\n        return x(d[xColumn]);\n      }).y(function (d) {\n        return y(d[yColumn]);\n      })(d.value);\n    });\n    nested.forEach(function (d, i) {\n      // Add the Legend\n      vis.g.append(\"text\").attr(\"x\", legendSpace / 2 + i * legendSpace) // space legend\n      .attr(\"y\", HEIGHT + MARGIN.BOTTOM / 2 + 5).attr(\"class\", \"legend\") // style the legend\n      .style(\"fill\", function () {\n        // Add the colours dynamically\n        return d.color = color(d.key);\n      }).text(d.key);\n    });\n  }\n\n}\n\nexport default D3Chart;","map":{"version":3,"sources":["/Users/andyalexander/Documents/d3/React/reactfordataviz/src/components/D3Chart.js"],"names":["d3","MARGIN","TOP","BOTTOM","LEFT","RIGHT","WIDTH","HEIGHT","D3Chart","constructor","element","data","breed","vis","xColumn","yColumn","g","select","append","attr","numOfCols","Object","keys","length","numOfDogs","xAxis","yAxis","console","log","update","forEach","d","year","Month","substr","month","west","Number","West_Highland_White_Terrier","retriever","Golden_Retriever","labrador","Labrador_Retriever","dalmatian","Dalmatian","NewDate","Date","newArray","push","Breed","Score","newData","lineColumn","x","scaleTime","domain","extent","range","y","scaleLinear","max","xAxisCall","axisBottom","call","scale","yAxisCall","axisLeft","ticks","tickFormat","format","nested","Array","from","group","key","value","color","scaleOrdinal","schemeCategory10","legendSpace","paths","selectAll","exit","remove","enter","line","i","style","text"],"mappings":"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","sourcesContent":["import * as d3 from 'd3'\n\n\nconst MARGIN = { TOP: 20, BOTTOM: 70, LEFT: 70, RIGHT: 10 }\nconst WIDTH = 1000 - MARGIN.LEFT - MARGIN.RIGHT\nconst HEIGHT = 300 - MARGIN.TOP - MARGIN.BOTTOM\n\nclass D3Chart {\n\tconstructor(element, data, breed) {\n\t\tlet vis = this\n\n    vis.data = data;\n\t\tvar xColumn = \"Date\"\n\t\tvar yColumn = \"Score\"\n\n\t\tvis.g = d3.select(element)\n\t\t\t.append(\"svg\")\n\t\t\t\t.attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\n\t\t\t\t.attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\n\t\t\t.append(\"g\")\n\t\t\t\t.attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\n\n\t\tvar numOfCols = Object.keys(vis.data[0]).length\n\n\t\tvar numOfDogs = numOfCols-2\n\n\t\t//console.log(numOfDogs)\n\n    //need to clean up data.\n\n\n\t\t//console.log(newArray)\n\n\t\t// axis groups\n\t\tvis.xAxis = vis.g.append(\"g\")\n\t\t\t.attr(\"class\", \"x axis\")\n\t\t\t.attr(\"transform\", `translate(0, ${HEIGHT})`)\n\t\tvis.yAxis = vis.g.append(\"g\")\n\t\t\t.attr(\"class\", \"y axis\")\n\n\t\t// Path generator\n\t\tconsole.log(breed)\n\t\tvis.update(vis.data, breed)\n\t}\n\n\tupdate(data, breed) {\n\t\tlet vis = this\n\n\t\tconsole.log('hello')\n\t\tconsole.log(data)\n\t\tconsole.log(breed)\n\n\t\tdata.forEach(d => {\n\t    d.year = d.Month.substr(0,4)\n\t\t\td.month = d.Month.substr(5,2)\n\t\t\td.west = Number(d.West_Highland_White_Terrier)\n\t\t\td.retriever = Number(d.Golden_Retriever)\n\t\t\td.labrador = Number(d.Labrador_Retriever)\n\t\t\td.dalmatian = Number(d.Dalmatian)\n\t\t\t// d.west = Number(d.West)\n\t\t\t// d.labrador = Number(d.Labrador)\n\t  })\n\t\tdata.forEach(d => {\n\t\t\td.NewDate = new Date(d.year, d.month, '01')\n\t\t})\n\n\t\t// unpivot the data\n\t\tvar newArray = []\n\t\tdata.forEach(d => {\n\t\t\t//needs to be refactored to be dynamic\n\t\t\t//loop for var numOfDogs\n\n\n\t\t\tnewArray.push({Date: d.NewDate, Breed: 'Westie', Score: d.west})\n\t\t\tnewArray.push({Date: d.NewDate, Breed: 'Retriever', Score: d.retriever})\n\t\t\tnewArray.push({Date: d.NewDate, Breed: 'Labrador', Score: d.labrador})\n\t\t\tnewArray.push({Date: d.NewDate, Breed: 'Dalmatian', Score: d.dalmatian})\n\t\t})\n\n\t\tvar newData = newArray\n\n\n\n\n\n\t\tvar lineColumn ='Breed';\n\t\tvar xColumn = \"Date\";\n\t\tvar yColumn = \"Score\";\n\n\t\t// scales\n\t\tconst x = d3.scaleTime()\n\t\t\t.domain(d3.extent(newData, d => d.Date))\n\t\t\t.range([0, WIDTH])\n\n\t\tconst y = d3.scaleLinear()\n\t\t\t.domain([0, d3.max(newData, d => d.Score)])\n\t\t\t.range([HEIGHT, 0])\n\n\t\t// generate axes once scales have been set\n\t\tvis.xAxisCall = d3.axisBottom()\n\t\tvis.xAxis.call(vis.xAxisCall.scale(x))\n\n\t\tvis.yAxisCall = d3.axisLeft()\n\t\t\t.ticks(6)\n\t\t\t.tickFormat(d3.format('.3s'))\n\t\tvis.yAxis.call(vis.yAxisCall.scale(y))\n\n\t\tvar nested = Array.from(\n\t\t d3.group(newData, d => d[lineColumn]), ([key, value]) => ({key, value})\n\t );\n\t\t//console.log(nested)\n\n\t\t// set the colour scale\n    var color = d3.scaleOrdinal(d3.schemeCategory10);\n\n\t\t// spacing for the legend\n\t\tvar legendSpace = WIDTH/nested.length;\n\n\t\t//nested.map((i) => console.log(i.value));\n\n\t\tconst paths = vis.g.selectAll('.line')\n\t\t.data(nested)\n\n\t\tpaths.exit().remove()\n\n\t\tpaths.enter().append(\"path\")\n\t\t\t.attr(\"fill\", \"none\")\n\t\t\t.attr(\"stroke\", function(d){ return color(d.key) })\n\t\t\t.attr(\"stroke-width\", 2)\n\t\t\t.attr(\"d\", function(d){\n        return d3.line()\n          .x(function(d) { return x(d[xColumn]); })\n          .y(function(d) { return y(d[yColumn]) })\n          (d.value)\n      })\n\n\n\t\tnested.forEach(function(d,i) {\n\t\t\t// Add the Legend\n      vis.g.append(\"text\")\n          .attr(\"x\", (legendSpace/2)+i*legendSpace)  // space legend\n          .attr(\"y\", HEIGHT + (MARGIN.BOTTOM/2)+ 5)\n          .attr(\"class\", \"legend\")    // style the legend\n          .style(\"fill\", function() { // Add the colours dynamically\n              return d.color = color(d.key); })\n          .text(d.key);\n\t\t})\n\n\t}\n}\n\nexport default D3Chart\n"]},"metadata":{},"sourceType":"module"}