{"ast":null,"code":"import * as d3 from 'd3';\nconst MARGIN = {\n  TOP: 10,\n  BOTTOM: 80,\n  LEFT: 70,\n  RIGHT: 10\n};\nconst WIDTH = 600 - MARGIN.LEFT - MARGIN.RIGHT;\nconst HEIGHT = 300 - MARGIN.TOP - MARGIN.BOTTOM;\n\nclass D3Chart {\n  constructor(element, data) {\n    let vis = this;\n    vis.data = data;\n    var xColumn = \"Date\";\n    var yColumn = \"Score\";\n    vis.g = d3.select(element).append(\"svg\").attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT).attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM).append(\"g\").attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`); //need to clean up data.\n\n    vis.data.forEach(d => {\n      d.Year = d.Month.substr(0, 4);\n      d.Month = d.Month.substr(5, 2);\n      d.West = Number(d.West);\n      d.Labrador = Number(d.Labrador);\n    });\n    vis.data.forEach(d => {\n      d.NewDate = new Date(d.Year, d.Month, '01');\n    }); // unpivot the data\n\n    var newArray = [];\n    vis.data.forEach(d => {\n      newArray.push({\n        Date: d.NewDate,\n        Breed: 'West',\n        Score: d.West\n      });\n      newArray.push({\n        Date: d.NewDate,\n        Breed: 'Labrador',\n        Score: d.Labrador\n      });\n    });\n    console.log(vis.data); //console.log(newArray)\n    // axis groups\n\n    vis.xAxis = vis.g.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", `translate(0, ${HEIGHT})`);\n    vis.yAxis = vis.g.append(\"g\").attr(\"class\", \"y axis\"); // Path generator\n\n    vis.update(newArray);\n  }\n\n  update(data) {\n    let vis = this;\n    var lineColumn = 'Breed';\n    var xColumn = \"Date\";\n    var yColumn = \"Score\"; // scales\n\n    const x = d3.scaleTime().domain(d3.extent(data, d => d.Date)).range([0, WIDTH]);\n    const y = d3.scaleLinear().domain([0, d3.max(data, d => d.Score)]).range([HEIGHT, 0]); // generate axes once scales have been set\n\n    vis.xAxisCall = d3.axisBottom();\n    vis.xAxis.call(vis.xAxisCall.scale(vis.x));\n    vis.yAxisCall = d3.axisLeft().ticks(6).tickFormat(d3.format('.3s'));\n    vis.yAxis.call(vis.yAxisCall.scale(vis.y));\n    console.log(data); //var nested = Array.from(d3.group(data, d => d[lineColumn]),([key, value]) => ({key, value}));\n    //var nested = d3.group(data, d => d[lineColumn])\n\n    var nested = Array.from(d3.group(data, d => d[lineColumn]), _ref => {\n      let [key, value] = _ref;\n      return {\n        key,\n        value\n      };\n    });\n    console.log(nested); // set the colour scale\n\n    var color = d3.scaleOrdinal(d3.schemeCategory10);\n    const line = d3.line().x(function (d) {\n      return x(d[xColumn]);\n    }).y(function (d) {\n      return y(d[yColumn]);\n    });\n    nested.forEach(function (d, i) {\n      vis.g.append(\"path\").attr(\"class\", \"chart-line\").style(\"stroke\", function () {\n        // Add the colours dynamically\n        return d.color = color(d.key);\n      }).attr(\"d\", line(d.value));\n    });\n  }\n\n}\n\nexport default D3Chart;","map":{"version":3,"sources":["/Users/andyalexander/Documents/d3/React/reactfordataviz/src/D3Chart.js"],"names":["d3","MARGIN","TOP","BOTTOM","LEFT","RIGHT","WIDTH","HEIGHT","D3Chart","constructor","element","data","vis","xColumn","yColumn","g","select","append","attr","forEach","d","Year","Month","substr","West","Number","Labrador","NewDate","Date","newArray","push","Breed","Score","console","log","xAxis","yAxis","update","lineColumn","x","scaleTime","domain","extent","range","y","scaleLinear","max","xAxisCall","axisBottom","call","scale","yAxisCall","axisLeft","ticks","tickFormat","format","nested","Array","from","group","key","value","color","scaleOrdinal","schemeCategory10","line","i","style"],"mappings":"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","sourcesContent":["import * as d3 from 'd3'\n\n\nconst MARGIN = { TOP: 10, BOTTOM: 80, LEFT: 70, RIGHT: 10 }\nconst WIDTH = 600 - MARGIN.LEFT - MARGIN.RIGHT\nconst HEIGHT = 300 - MARGIN.TOP - MARGIN.BOTTOM\n\nclass D3Chart {\n\tconstructor(element, data) {\n\t\tlet vis = this\n\n    vis.data = data;\n\t\tvar xColumn = \"Date\"\n\t\tvar yColumn = \"Score\"\n\n\n\n\t\tvis.g = d3.select(element)\n\t\t\t.append(\"svg\")\n\t\t\t\t.attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\n\t\t\t\t.attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\n\t\t\t.append(\"g\")\n\t\t\t\t.attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\n\n\n\n    //need to clean up data.\n\t\tvis.data.forEach(d => {\n\t    d.Year = d.Month.substr(0,4)\n\t\t\td.Month = d.Month.substr(5,2)\n\t\t\td.West = Number(d.West)\n\t\t\td.Labrador = Number(d.Labrador)\n\t  })\n\t\tvis.data.forEach(d => {\n\t\t\td.NewDate = new Date(d.Year, d.Month, '01')\n\t\t})\n\n\t\t// unpivot the data\n\t\tvar newArray = []\n\t\tvis.data.forEach(d => {\n\t\t\tnewArray.push({Date: d.NewDate, Breed: 'West', Score: d.West,})\n\t\t\tnewArray.push({Date: d.NewDate, Breed: 'Labrador', Score: d.Labrador})\n\t\t})\n\n\n\t\tconsole.log(vis.data)\n\t\t//console.log(newArray)\n\n\n\n\n\n\t\t// axis groups\n\t\tvis.xAxis = vis.g.append(\"g\")\n\t\t\t.attr(\"class\", \"x axis\")\n\t\t\t.attr(\"transform\", `translate(0, ${HEIGHT})`)\n\t\tvis.yAxis = vis.g.append(\"g\")\n\t\t\t.attr(\"class\", \"y axis\")\n\n\t\t// Path generator\n\n\t\tvis.update(newArray)\n\t}\n\n\tupdate(data) {\n\t\tlet vis = this\n\n\t\tvar lineColumn ='Breed';\n\t\tvar xColumn = \"Date\";\n\t\tvar yColumn = \"Score\";\n\n\t\t// scales\n\t\tconst x = d3.scaleTime()\n\t\t\t.domain(d3.extent(data, d => d.Date))\n\t\t\t.range([0, WIDTH])\n\n\t\tconst y = d3.scaleLinear()\n\t\t\t.domain([0, d3.max(data, d => d.Score)])\n\t\t\t.range([HEIGHT, 0])\n\n\n\t\t// generate axes once scales have been set\n\t\tvis.xAxisCall = d3.axisBottom()\n\t\tvis.xAxis.call(vis.xAxisCall.scale(vis.x))\n\n\t\tvis.yAxisCall = d3.axisLeft()\n\t\t\t.ticks(6)\n\t\t\t.tickFormat(d3.format('.3s'))\n\t\tvis.yAxis.call(vis.yAxisCall.scale(vis.y))\n\n\t\tconsole.log(data)\n\t\t//var nested = Array.from(d3.group(data, d => d[lineColumn]),([key, value]) => ({key, value}));\n\t\t//var nested = d3.group(data, d => d[lineColumn])\n\n\t\tvar nested = Array.from(\n\t\t d3.group(data, d => d[lineColumn]), ([key, value]) => ({key, value})\n\t );\n\t\tconsole.log(nested)\n\n\t\t// set the colour scale\n    var color = d3.scaleOrdinal(d3.schemeCategory10);\n\n\n\t\tconst line = d3.line()\n    .x(function(d) { return x(d[xColumn]); })\n    .y(function(d) { return y(d[yColumn]); });\n\n\t\tnested.forEach(function(d,i) {\n\t\t\tvis.g.append(\"path\")\n\t\t\t.attr(\"class\", \"chart-line\")\n\t\t\t.style(\"stroke\", function() { // Add the colours dynamically\n\t\t\t\treturn d.color = color(d.key);\n\t\t\t})\n\t\t\t.attr(\"d\", line(d.value));\n\n\t\t})\n\n\n\t}\n}\n\nexport default D3Chart\n"]},"metadata":{},"sourceType":"module"}